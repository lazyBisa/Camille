// This file is automatically generated.
// Do not directly edit.
// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version {{= version }}
// Generated on {{= (new Date).toUTCString() }}
{{
    const dotUtils = require('./dotUtils.js');
}}

using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace MingweiSamuel.Camille.Model.{{= endpoint }}
{
{{

	if (schema.type === 'object') {
		let props = schema.properties;
        let desc = schema.description;
        if (desc) {
}}
    /// {{= desc }}
{{
        }
}}
    public class {{= schemaName }}
    {
        public {{= schemaName }}({{= 
			Object.entries(props)
				.map(([ key, value ]) => dotUtils.formatJsonProperty(key) + ' ' + dotUtils.stringifyType(key, value) + ' ' + dotUtils.normalizeArgName(key))
				.join(',\r\n                ') 
			}})
        {
{{
        for (let [ propKey, prop ] of Object.entries(props))
        {
            let name = dotUtils.normalizePropName(propKey, schemaName, prop);
            let argName = dotUtils.normalizeArgName(propKey);
}}
            this.{{= name }} = {{= argName }};
{{
        }
}}
        }
{{
        for (let [ propKey, prop ] of Object.entries(props))
        {
            let name = dotUtils.normalizePropName(propKey, schemaName, prop);
}}
        {{= dotUtils.formatJsonProperty(propKey) }}
        public readonly {{= dotUtils.stringifyType(name, prop) }} {{= name }};
{{
        }
}}

        public override string ToString()
        {
            return $"{{= schemaName }}({{= Object.entries(props)
                .map(([ propKey, prop ]) => dotUtils.normalizePropName(propKey, schemaName, prop))
                .map(n => n + ': { this.' + n + ' }')
                .join(', ') }})";
        }
    }
{{
	} else if (schema.enum) {
}}
	[JsonConverter(typeof(StringEnumConverter))]
	public enum {{= schemaName }}
	{
{{
		for (let enummember of schema.enum) {
}}
		{{= enummember }},
{{ 
		}
}}
	}
{{
	} else {
		/*primitive or array types on the schema top-level, should not happen*/
		throw 'Primitive Type on toplevel';
	}
}}
}